        -:    0:Source:../src/logger.c
        -:    0:Graph:logger.gcno
        -:    0:Data:logger.gcda
        -:    0:Runs:20
        -:    0:Programs:2
        -:    1:/******************************************************************************
        -:    2:*  FILE NAME    : logger.c
        -:    3:*
        -:    4:*  DESCRIPTION	: Function definitions for logger
        -:    5:*
        -:    6:*		COPYRIGHTS ARICENT TECHNOLOGY HOLDINGS
        -:    7:*******************************************************************************/
        -:    8:
        -:    9:/***************************HEADER FILES INCLUDED******************************/
        -:   10:#include "logger.h"
        -:   11:
        -:   12:/********************************************************************
        -:   13:*      			Global variables
        -:   14:********************************************************************/
        -:   15:int g_error_level = ERROR_MAJOR;
        -:   16:    char err_file[FILE_SIZE];
        -:   17:    int err_no;
        -:   18:    int err_level = 4;
        -:   19:    long err_max = 10000L;
        -:   20:
        -:   21:
        -:   22:static char time_string[LOG_SIZE];
        -:   23:
        -:   24:    int err_no;
        -:   25:    int log_level = LOG_LEVEL;
        -:   26:    long log_max = LOG_MAX;
        -:   27:
        -:   28:/******************************************************************************
        -:   29:*
        -:   30:* 	FUNCTION NAME: logger
        -:   31:*
        -:   32:*	DESCRIPTION  : Global function for debugging information
        -:   33:*
        -:   34:* 	 RETURNS     : Returns void
        -:   35:*******************************************************************************/
        -:   36:
      247:   37:void logger( int level, char *log_msg )
        -:   38:{
      247:   39: strcpy(log_file,"logfile.txt");
        -:   40:
        -:   41: FILE *logfile;
        -:   42: char buffer[BUFF_SIZE];
      247:   43: int attempts = ZERO;
        -:   44:
        -:   45:
      247:   46: if (log_level >= level) /* Don't do debug messages with a lower priority */
        -:   47: {                         /* than the program's debugging level.           */
        -:   48:
      247:   49:	get_now_time();
      247:   50:  	(void)snprintf(buffer, (size_t)LOG_SIZE,"\n%s|%d--> ", time_string, getpid());
        -:   51:
      494:   52:  	for (attempts = 0; attempts < LOOP; attempts++)
        -:   53:  	{
      247:   54:   		if ( '\0' != log_file[0] )
        -:   55:   		{
      247:   56:			if ((logfile = fopen(log_file, "a")) != NULL)
        -:   57:    			{
      247:   58:     				fprintf(logfile, "%s %s\n", buffer, log_msg);
      247:   59:     				(void)fflush(logfile);
      247:   60:     				(void)fclose(logfile);
        -:   61:
      247:   62:     				attempts = 5;
        -:   63:    			}
        -:   64:    			else
    #####:   65:     				(void)usleep((__useconds_t)100000L); /* Wait, someone writing now */
        -:   66:   		}
        -:   67:   		else
        -:   68:    			/* failure, try to print it where someone can find it */
        -:   69:    			/* This too may fail..                                */
        -:   70:
    #####:   71:    			(void)fprintf(stderr, "%s\n", buffer);
        -:   72:  	}/*end of for*/
      247:   73:  	roll_over_log();
        -:   74:  }/*end of if*/
        -:   75:
      247:   76:} /*end of function*/
        -:   77:
        -:   78:
        -:   79:/******************************************************************************
        -:   80:*
        -:   81:* FUNCTION NAME: get_now_time
        -:   82:*
        -:   83:* DESCRIPTION: Gets the current system time
        -:   84:*
        -:   85:* RETURNS: Returns string contains current time
        -:   86:*******************************************************************************/
        -:   87:
      249:   88:void get_now_time( void )
        -:   89:{
        -:   90:
        -:   91:        struct timeb tb;
        -:   92:        struct tm *tmp;
        -:   93:
        -:   94:
      249:   95:        (void)ftime(&tb);
      249:   96:        tmp = localtime(&tb.time);
      249:   97:	if( NULL != tmp )
      249:   98:        	(void)strftime(time_string, sizeof(time_string), "%h %d %H:%M:%S", tmp);
      249:   99:        (void)snprintf(&time_string[strlen(time_string)], (size_t)LOG_SIZE,".%03u", tb.millitm);
        -:  100:
        -:  101:
      249:  102:}/*end of function*/
        -:  103:
        -:  104:
        -:  105:/******************************************************************************
        -:  106:*
        -:  107:* FUNCTION NAME: roll_over_log
        -:  108:*
        -:  109:* DESCRIPTION: Checks for the log file
        -:  110:*
        -:  111:* RETURNS: Returns void
        -:  112:*******************************************************************************/
        -:  113:
      247:  114:void roll_over_log( void )
        -:  115:{
        -:  116:
        -:  117:        struct stat file_stat;
        -:  118:        char backup_file[LOG_SIZE];
        -:  119:
        -:  120:
        -:  121:        /* A 0 limit size means don't limit file */
      247:  122:        if ( 0 == log_max ) return;
        -:  123:
        -:  124:        /* A NULL file name. */
      247:  125:        if ( '\0' == log_file[0] )     return;
        -:  126:
        -:  127:        /* Oops. This is bad. No file. */
      247:  128:        if ( -1 == stat(log_file, &file_stat) )       return;
        -:  129:
        -:  130:        /* File still smaller than limit */
      247:  131:        if (file_stat.st_size < log_max)      return;
        -:  132:
        2:  133:        (void)snprintf(backup_file,(size_t)LOG_SIZE ,"%s.bak", log_file);
        -:  134:
        -:  135:        /* remove the old backup if it exists */
        2:  136:        (void)unlink(backup_file);
        -:  137:
        -:  138:        /* chmod ugo+rwx the new log file */
        -:  139:
        2:  140:	(void)rename(log_file, backup_file);
        -:  141:
        -:  142:
        -:  143:}/*end of function*/
        -:  144:
        -:  145:
        -:  146:/********************************************************************
        -:  147:*
        -:  148:* FUNCTION NAME: ang_error
        -:  149:*
        -:  150:* DESCRIPTION: Prints the error message along with the error number
        -:  151:*
        -:  152:* RETURNS: Returns void
        -:  153:*********************************************************************/
        2:  154:void ang_error(int err_level,char *msg)
        -:  155:{
        -:  156:
        2:  157:    strcpy(err_file,"errorfile.txt");
        -:  158:    FILE *errfile;
        -:  159:    char buffer[BUFF_SIZE];
        2:  160:    int attempts = 0;
        -:  161:
        -:  162:    /* compare the err_level parameter against the global flag to see
        -:  163:       whether the input error level is suppressed or not. If not then
        -:  164:       the input error message is printed */
        -:  165:
        2:  166:    if(err_level <= g_error_level)
        -:  167:    {
        2:  168:      	 get_now_time();
        -:  169:        
        2:  170:  	 (void)snprintf(buffer, (size_t)BUFF_SIZE,"\n%s|%d|--> ", time_string, getpid());
        2:  171:         printf("Error : (%s)\n", msg);
        4:  172:         for (attempts = 0; attempts < LOOP; attempts++)
        -:  173:  	 {
        2:  174:   		if ( '\0' != err_file[0] ) 
        -:  175:   		{
        2:  176:			if ((errfile = fopen(err_file, "a")) != NULL)
        -:  177:    			{
        2:  178:   				fprintf(errfile, "%s %s\n", buffer, msg);
        2:  179:     				(void)fflush(errfile);
        2:  180:     				(void)fclose(errfile);
        -:  181:
        2:  182:     				attempts = 21;
        -:  183:    			}
        -:  184:    			else
    #####:  185:     				(void)usleep((__useconds_t)100000L); /* Wait, someone writing now */
        -:  186:   		}
        -:  187:  		else
        -:  188:    			/* failure, try to print it where someone can find it */
        -:  189:    			/* This too may fail..                                */
        -:  190:
    #####:  191:  			(void)fprintf(stderr, "%s\n", buffer);
        -:  192:  	}/*end of for*/
        2:  193:  	roll_over_err();
        -:  194:  }/*end of if*/
        -:  195:
        2:  196:}
        -:  197:    
        -:  198:
        -:  199:/******************************************************************************
        -:  200:*
        -:  201:* FUNCTION NAME: roll_over_log
        -:  202:*
        -:  203:* DESCRIPTION: Checks for the log file
        -:  204:*
        -:  205:* RETURNS: Returns void
        -:  206:*******************************************************************************/
        -:  207:
        2:  208:void roll_over_err( void )
        -:  209:{
        -:  210:
        -:  211:        struct stat file_stat;
        -:  212:        char backup_file[FILE_SIZE];
        -:  213:
        -:  214:
        -:  215:        /* A 0 limit size means don't limit file */
        2:  216:        if ( 0 == err_max ) return;
        -:  217:
        -:  218:        /* A NULL file name. */
        2:  219:        if ( '\0' ==  err_file[0] )     return;
        -:  220:
        -:  221:        /* Oops. This is bad. No file. */
        2:  222:        if ( -1 == stat(err_file, &file_stat) )       return;
        -:  223:
        -:  224:        /* File still smaller than limit */
        2:  225:        if (file_stat.st_size < err_max)      return;
        -:  226:
    #####:  227:        (void)snprintf(backup_file,(size_t)LOG_SIZE ,"%s.bak", err_file);
        -:  228:
        -:  229:        /* remove the old backup if it exists */
    #####:  230:        (void)unlink(backup_file);
        -:  231:
        -:  232:        /* chmod ugo+rwx the new log file */
        -:  233:
    #####:  234:	(void)rename(err_file, backup_file);
        -:  235:
        -:  236:}/*end of function*/
        -:  237:
        -:  238:
        -:  239:
